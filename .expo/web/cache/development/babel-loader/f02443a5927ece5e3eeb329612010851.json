{"ast":null,"code":"import _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport LoginScreen from \"../screens/LoginScreen\";\nimport { SignUp } from \"../screens/SignUpScreen\";\nimport SignUpScreen2 from \"../screens/SignupScreen2\";\nimport VerifyAccountScreen from \"../screens/VerifyAccountScreen\";\nimport { TabNavigator } from \"./TabStack\";\nimport React, { useEffect, useState } from \"react\";\nimport OnBoardingScreen from \"../screens/OnBoardingScreen\";\nimport AsyncStorage from \"@react-native-async-storage/async-storage\";\nimport { createStackNavigator } from '@react-navigation/stack';\nimport ForgotPassword from \"../screens/ForgotPassword\";\nimport VerifyPasswordToken from \"../screens/VerifyPasswordToken\";\nimport PasswordInput from \"../screens/PasswordInput\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nvar Stack = createStackNavigator();\nvar AuthenticationStack = function AuthenticationStack() {\n  var _useState = useState(null),\n    _useState2 = _slicedToArray(_useState, 2),\n    isAppFirstLaunched = _useState2[0],\n    setIsAppFirstLaunched = _useState2[1];\n  var checkForFirstTimeLoaded = function () {\n    var _ref = _asyncToGenerator(function* () {\n      var appData = yield AsyncStorage.getItem(\"isAppFirstLaunched\");\n      console.log(appData);\n      if (appData == null) {\n        setIsAppFirstLaunched(true);\n        AsyncStorage.setItem('isAppFirstLaunched', 'false');\n      } else {\n        setIsAppFirstLaunched(false);\n      }\n    });\n    return function checkForFirstTimeLoaded() {\n      return _ref.apply(this, arguments);\n    };\n  }();\n  useEffect(function () {\n    checkForFirstTimeLoaded();\n  }, []);\n  return isAppFirstLaunched !== null && _jsxs(Stack.Navigator, {\n    screenOptions: {\n      headerShown: false\n    },\n    children: [isAppFirstLaunched && _jsx(Stack.Screen, {\n      component: OnBoardingScreen,\n      name: \"OnBoarding\"\n    }), _jsx(Stack.Screen, {\n      component: LoginScreen,\n      name: \"Log-in\"\n    }), _jsx(Stack.Screen, {\n      component: SignUp,\n      name: \"Sign-up\"\n    }), _jsx(Stack.Screen, {\n      component: VerifyAccountScreen,\n      name: \"verify\"\n    }), _jsx(Stack.Screen, {\n      component: SignUpScreen2,\n      name: \"Sign-up2\"\n    }), _jsx(Stack.Screen, {\n      component: ForgotPassword,\n      name: \"password\"\n    }), _jsx(Stack.Screen, {\n      component: VerifyPasswordToken,\n      name: \"verifyPasswordToken\"\n    }), _jsx(Stack.Screen, {\n      component: PasswordInput,\n      name: \"PasswordInput\"\n    }), _jsx(Stack.Screen, {\n      component: TabNavigator,\n      name: \"Tab\"\n    })]\n  });\n};\nexport default AuthenticationStack;","map":{"version":3,"names":["LoginScreen","SignUp","SignUpScreen2","VerifyAccountScreen","TabNavigator","React","useEffect","useState","OnBoardingScreen","AsyncStorage","createStackNavigator","ForgotPassword","VerifyPasswordToken","PasswordInput","jsx","_jsx","jsxs","_jsxs","Stack","AuthenticationStack","_useState","_useState2","_slicedToArray","isAppFirstLaunched","setIsAppFirstLaunched","checkForFirstTimeLoaded","_ref","_asyncToGenerator","appData","getItem","console","log","setItem","apply","arguments","Navigator","screenOptions","headerShown","children","Screen","component","name"],"sources":["C:/Users/STEPHEN/Desktop/busa_app1-main/navigation/AuthenticationStack.js"],"sourcesContent":["// import {createNativeStackNavigator} from '@react-navigation/native-stack';\r\nimport LoginScreen from \"../screens/LoginScreen\";\r\nimport { SignUp } from \"../screens/SignUpScreen\";\r\nimport SignUpScreen2 from \"../screens/SignupScreen2\"\r\nimport VerifyAccountScreen from \"../screens/VerifyAccountScreen\";\r\nimport { TabNavigator } from \"./TabStack\";\r\nimport React, {useEffect, useState} from \"react\"\r\nimport OnBoardingScreen from \"../screens/OnBoardingScreen\"\r\nimport AsyncStorage from \"@react-native-async-storage/async-storage\";\r\nimport { createStackNavigator } from '@react-navigation/stack';\r\nimport ForgotPassword from \"../screens/ForgotPassword\";\r\nimport VerifyPasswordToken from \"../screens/VerifyPasswordToken\";\r\nimport PasswordInput from \"../screens/PasswordInput\";\r\n\r\n\r\nconst Stack = createStackNavigator()\r\n\r\n\r\nconst AuthenticationStack =()=> {\r\n\t\r\n\tconst [isAppFirstLaunched, setIsAppFirstLaunched] = useState(null)\r\n\r\n\tconst checkForFirstTimeLoaded = async () => {\r\n\t\tconst appData = await AsyncStorage.getItem(\"isAppFirstLaunched\")\r\n\t\tconsole.log(appData)\r\n\t\t\r\n\t\tif(appData == null){\r\n\t\t\tsetIsAppFirstLaunched(true)\r\n\t\t\tAsyncStorage.setItem('isAppFirstLaunched', 'false');\r\n\t\t}else{\r\n\t\t\tsetIsAppFirstLaunched(false)\r\n\t\t}\r\n\t  }\r\n\r\n\r\nuseEffect(()=>{\r\n\tcheckForFirstTimeLoaded()\r\n},[])\r\n\r\n\r\n\treturn (\r\n      isAppFirstLaunched!==null &&(\r\n\t\t<Stack.Navigator\r\n\t\t\tscreenOptions={{ headerShown: false }}\r\n\t\t>\r\n\t\t\t{isAppFirstLaunched && (<Stack.Screen component={OnBoardingScreen} name=\"OnBoarding\"/>)}\r\n\t\t\t <Stack.Screen component={LoginScreen} name=\"Log-in\" /> \r\n\t\t\t   <Stack.Screen component={SignUp} name=\"Sign-up\" />\r\n\t\t\t   <Stack.Screen component={VerifyAccountScreen} name=\"verify\" /> \r\n\t\t\t   <Stack.Screen component={SignUpScreen2} name=\"Sign-up2\" /> \r\n\t\t\t   <Stack.Screen component={ForgotPassword} name=\"password\" /> \r\n\t\t\t   <Stack.Screen component={VerifyPasswordToken} name=\"verifyPasswordToken\"/> \r\n\t\t\t   <Stack.Screen component={PasswordInput} name=\"PasswordInput\"/> \r\n\t\t\t <Stack.Screen component={TabNavigator} name=\"Tab\" /> \r\n\r\n\t\t</Stack.Navigator>\r\n\t )\r\n\t)\r\n;\r\n\r\n\r\n\r\n}\r\n\r\n//in the aunthentication stack, if the user is just coming to the app for the first time, show the onboarding screen and save the result to the async storage\r\n\r\n\r\nexport default AuthenticationStack\r\n"],"mappings":";;AACA,OAAOA,WAAW;AAClB,SAASC,MAAM;AACf,OAAOC,aAAa;AACpB,OAAOC,mBAAmB;AAC1B,SAASC,YAAY;AACrB,OAAOC,KAAK,IAAGC,SAAS,EAAEC,QAAQ,QAAO,OAAO;AAChD,OAAOC,gBAAgB;AACvB,OAAOC,YAAY,MAAM,2CAA2C;AACpE,SAASC,oBAAoB,QAAQ,yBAAyB;AAC9D,OAAOC,cAAc;AACrB,OAAOC,mBAAmB;AAC1B,OAAOC,aAAa;AAAiC,SAAAC,GAAA,IAAAC,IAAA;AAAA,SAAAC,IAAA,IAAAC,KAAA;AAGrD,IAAMC,KAAK,GAAGR,oBAAoB,EAAE;AAGpC,IAAMS,mBAAmB,GAAE,SAArBA,mBAAmBA,CAAA,EAAO;EAE/B,IAAAC,SAAA,GAAoDb,QAAQ,CAAC,IAAI,CAAC;IAAAc,UAAA,GAAAC,cAAA,CAAAF,SAAA;IAA3DG,kBAAkB,GAAAF,UAAA;IAAEG,qBAAqB,GAAAH,UAAA;EAEhD,IAAMI,uBAAuB;IAAA,IAAAC,IAAA,GAAAC,iBAAA,CAAG,aAAY;MAC3C,IAAMC,OAAO,SAASnB,YAAY,CAACoB,OAAO,CAAC,oBAAoB,CAAC;MAChEC,OAAO,CAACC,GAAG,CAACH,OAAO,CAAC;MAEpB,IAAGA,OAAO,IAAI,IAAI,EAAC;QAClBJ,qBAAqB,CAAC,IAAI,CAAC;QAC3Bf,YAAY,CAACuB,OAAO,CAAC,oBAAoB,EAAE,OAAO,CAAC;MACpD,CAAC,MAAI;QACJR,qBAAqB,CAAC,KAAK,CAAC;MAC7B;IACC,CAAC;IAAA,gBAVGC,uBAAuBA,CAAA;MAAA,OAAAC,IAAA,CAAAO,KAAA,OAAAC,SAAA;IAAA;EAAA,GAU1B;EAGJ5B,SAAS,CAAC,YAAI;IACbmB,uBAAuB,EAAE;EAC1B,CAAC,EAAC,EAAE,CAAC;EAGJ,OACKF,kBAAkB,KAAG,IAAI,IAC7BN,KAAA,CAACC,KAAK,CAACiB,SAAS;IACfC,aAAa,EAAE;MAAEC,WAAW,EAAE;IAAM,CAAE;IAAAC,QAAA,GAErCf,kBAAkB,IAAKR,IAAA,CAACG,KAAK,CAACqB,MAAM;MAACC,SAAS,EAAEhC,gBAAiB;MAACiC,IAAI,EAAC;IAAY,EAAG,EACtF1B,IAAA,CAACG,KAAK,CAACqB,MAAM;MAACC,SAAS,EAAExC,WAAY;MAACyC,IAAI,EAAC;IAAQ,EAAG,EACpD1B,IAAA,CAACG,KAAK,CAACqB,MAAM;MAACC,SAAS,EAAEvC,MAAO;MAACwC,IAAI,EAAC;IAAS,EAAG,EAClD1B,IAAA,CAACG,KAAK,CAACqB,MAAM;MAACC,SAAS,EAAErC,mBAAoB;MAACsC,IAAI,EAAC;IAAQ,EAAG,EAC9D1B,IAAA,CAACG,KAAK,CAACqB,MAAM;MAACC,SAAS,EAAEtC,aAAc;MAACuC,IAAI,EAAC;IAAU,EAAG,EAC1D1B,IAAA,CAACG,KAAK,CAACqB,MAAM;MAACC,SAAS,EAAE7B,cAAe;MAAC8B,IAAI,EAAC;IAAU,EAAG,EAC3D1B,IAAA,CAACG,KAAK,CAACqB,MAAM;MAACC,SAAS,EAAE5B,mBAAoB;MAAC6B,IAAI,EAAC;IAAqB,EAAE,EAC1E1B,IAAA,CAACG,KAAK,CAACqB,MAAM;MAACC,SAAS,EAAE3B,aAAc;MAAC4B,IAAI,EAAC;IAAe,EAAE,EAChE1B,IAAA,CAACG,KAAK,CAACqB,MAAM;MAACC,SAAS,EAAEpC,YAAa;MAACqC,IAAI,EAAC;IAAK,EAAG;EAAA,EAGrD;AAMH,CAAC;AAKD,eAAetB,mBAAmB"},"metadata":{},"sourceType":"module"}