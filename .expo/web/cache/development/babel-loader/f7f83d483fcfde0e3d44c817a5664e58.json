{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport React, { useState, useEffect, useRef } from \"react\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Switch from \"react-native-web/dist/exports/Switch\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport Dimensions from \"react-native-web/dist/exports/Dimensions\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport { COLORS } from \"../constants/theme\";\nimport { Back } from \"../constants/icons\";\nimport { useNavigation } from \"@react-navigation/native\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nvar _Dimensions$get = Dimensions.get(\"screen\"),\n  width = _Dimensions$get.width;\nexport var Notification = function Notification() {\n  var navigation = useNavigation();\n  var _useState = useState(true),\n    _useState2 = _slicedToArray(_useState, 2),\n    isEnabled = _useState2[0],\n    setIsEnabled = _useState2[1];\n  var toggleSwitch = function toggleSwitch() {\n    setIsEnabled(function (previousState) {\n      return !previousState;\n    });\n  };\n  return _jsxs(View, {\n    style: {\n      marginLeft: 30,\n      marginRight: 30,\n      top: 40\n    },\n    children: [_jsxs(View, {\n      style: {\n        flexDirection: \"row\",\n        paddingTop: 20,\n        justifyContent: \"space-between\"\n      },\n      children: [_jsx(TouchableOpacity, {\n        activeOpacity: 0.7,\n        onPress: function onPress() {\n          return navigation.goBack();\n        },\n        children: _jsx(Back, {\n          size: 25,\n          style: {}\n        })\n      }), _jsx(Text, {\n        style: {\n          fontSize: 24,\n          fontWeight: \"600\",\n          textAlign: \"center\",\n          color: COLORS.black,\n          marginRight: width / 6,\n          paddingBottom: 20,\n          fontFamily: \"Poppins3\"\n        },\n        children: \"Notifications\"\n      })]\n    }), _jsx(Text, {\n      style: {\n        fontSize: 17,\n        fontWeight: \"600\",\n        paddingBottom: 5,\n        color: COLORS.black,\n        fontFamily: \"Poppins2\"\n      },\n      children: \"Notification Settings\"\n    }), _jsx(Text, {\n      style: {\n        width: 315,\n        fontSize: 12,\n        paddingBottom: 5,\n        fontWeight: \"300\",\n        color: COLORS.black,\n        fontFamily: \"Poppins\"\n      },\n      children: \"We may still send you important notifications about your account outside of your notification settings\"\n    }), _jsx(Text, {\n      style: {\n        fontSize: 10,\n        paddingBottom: 8,\n        color: COLORS.black,\n        fontWeight: \"500\",\n        fontFamily: \"Poppins\"\n      },\n      children: \"Interactions\"\n    }), _jsxs(View, {\n      style: {\n        width: width - 60,\n        height: 48,\n        backgroundColor: COLORS.white,\n        borderRadius: 5,\n        alignItems: \"center\",\n        flexDirection: \"row\",\n        justifyContent: \"space-between\"\n      },\n      children: [_jsx(Text, {\n        style: {\n          fontSize: 12,\n          fontWeight: \"600\",\n          color: COLORS.black,\n          marginLeft: 5,\n          fontFamily: \"Poppins\"\n        },\n        children: \"Notifications\"\n      }), _jsx(Switch, {\n        trackColor: {\n          false: \"#767577\",\n          true: \"#81b0ff\"\n        },\n        thumbColor: isEnabled ? COLORS.primary : \"#f4f3f4\",\n        ios_backgroundColor: \"#3e3e3e\",\n        onValueChange: toggleSwitch,\n        value: isEnabled\n      })]\n    })]\n  });\n};\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: \"#fff\",\n    alignItems: \"center\",\n    justifyContent: \"center\"\n  },\n  permission: {\n    flexDirection: \"row\",\n    alignItems: \"center\",\n    marginVertical: 10\n  }\n});","map":{"version":3,"names":["React","useState","useEffect","useRef","StyleSheet","Text","View","Switch","TouchableOpacity","Dimensions","Platform","COLORS","Back","useNavigation","jsx","_jsx","jsxs","_jsxs","_Dimensions$get","get","width","Notification","navigation","_useState","_useState2","_slicedToArray","isEnabled","setIsEnabled","toggleSwitch","previousState","style","marginLeft","marginRight","top","children","flexDirection","paddingTop","justifyContent","activeOpacity","onPress","goBack","size","fontSize","fontWeight","textAlign","color","black","paddingBottom","fontFamily","height","backgroundColor","white","borderRadius","alignItems","trackColor","false","true","thumbColor","primary","ios_backgroundColor","onValueChange","value","styles","create","container","flex","permission","marginVertical"],"sources":["C:/Users/STEPHEN/Desktop/busa_app1-main/Components/Notification.js"],"sourcesContent":["import React, { useState, useEffect, useRef } from \"react\";\r\nimport {\r\n\tStyleSheet,\r\n\tText,\r\n\tView,\r\n\tSwitch,\r\n\tTouchableOpacity,\r\n\tDimensions,\r\n\tPlatform,\r\n} from \"react-native\";\r\n// import * as Notifications from \"expo-notifications\";\r\nimport { COLORS } from \"../constants/theme\";\r\nimport { Back } from \"../constants/icons\";\r\nimport { useNavigation } from \"@react-navigation/native\";\r\n// import client from \"../api/client\";\r\n// import * as Device from \"expo-device\";\r\n\r\n\r\nconst { width } = Dimensions.get(\"screen\");\r\n\r\nexport const Notification = () => {\r\n\tconst navigation = useNavigation()\r\n\tconst [isEnabled, setIsEnabled] = useState(true);\r\n\t// const [expoPushToken, setExpoPushToken] = useState(null);\r\n\t// const [notification, setNotification] = useState(false);\r\n\r\n\r\n\t// async function registerForPushNotificationsAsync() {\r\n\t// \tlet token;\r\n\t// \tif (Device.isDevice) {\r\n\t// \t  const { status: existingStatus } = await Notifications.getPermissionsAsync();\r\n\t// \t  let finalStatus = existingStatus;\r\n\t// \t  if (existingStatus !== 'granted') {\r\n\t// \t\tconst { status } = await Notifications.requestPermissionsAsync();\r\n\t// \t\tfinalStatus = status;\r\n\t// \t  }\r\n\t// \t  if (finalStatus !== 'granted') {\r\n\t// \t\talert('Failed to get push token for push notification!');\r\n\t// \t\treturn;\r\n\t// \t  }\r\n\t// \t  token = (await Notifications.getExpoPushTokenAsync()).data;\r\n\t// \t  console.log(\"token\", token);\r\n\t// \t} else {\r\n\t// \t  alert('Must use physical device for Push Notifications');\r\n\t// \t}\r\n\t  \r\n\t// \tif (Platform.OS === 'android') {\r\n\t// \t  Notifications.setNotificationChannelAsync('default', {\r\n\t// \t\tname: 'default',\r\n\t// \t\timportance: Notifications.AndroidImportance.MAX,\r\n\t// \t\tvibrationPattern: [0, 250, 250, 250],\r\n\t// \t\tlightColor: '#FF231F7C',\r\n\t// \t  });\r\n\t// \t}\r\n\t  \r\n\t// \treturn token;\r\n\t//   }\r\n\r\n    //           const listener = useRef()\r\n\t// \t\t  const responseListener = useRef()\r\n\t// useEffect(() => {\r\n\t// \t// Get the current permission status\r\n\t// \tNotifications.getPermissionsAsync().then((statusObj) => {\r\n\t// \t\tsetIsEnabled(statusObj.granted);\r\n\t// \t});\r\n\r\n\t// \t// Listen for incoming notifications\r\n\t// \tlistener.current = Notifications.addNotificationReceivedListener((notification) => {\r\n\t// \t\tsetNotification(notification);\r\n\t// \t  });\r\n\r\n\t// \t  responseListener.current = Notifications.addNotificationResponseReceivedListener(response => {\r\n\t// \t\tconsole.log(response);\r\n\t// \t  });\r\n\r\n\t// \t// Get the Expo push token\r\n\r\n\t// \t// registerForPushNotificationsAsync().then((pushToken) => {\r\n\t// \t// \tconsole.log(pushToken);\r\n\t// \t// \tsetExpoPushToken(pushToken.data);\r\n\t// \t// \t// Send the Expo push token to the backend\r\n\t// \t// \tsendPushTokenToBackend(pushToken.data);\r\n\t// \t// });\r\n\r\n\t// \tNotifications.getExpoPushTokenAsync().then((pushToken) => {\r\n\t// \t\tif (Platform.OS === 'android') {\r\n\t// \t\t\tNotifications.setNotificationChannelAsync('default', {\r\n\t// \t\t\t  name: 'default',\r\n\t// \t\t\t  importance: Notifications.AndroidImportance.MAX,\r\n\t// \t\t\t  vibrationPattern: [0, 250, 250, 250],\r\n\t// \t\t\t  lightColor: '#FF231F7C',\r\n\t// \t\t\t});\r\n\t// \t\t  }\r\n\t// \t\tconsole.log(pushToken);\r\n\t// \t\tsetExpoPushToken(pushToken.data);\r\n\t// \t\t// Send the Expo push token to the backend\r\n\t// \t\tsendPushTokenToBackend(pushToken.data);\r\n\t// \t});\r\n\r\n\t// \t// Remove the listener when the component is unmounted\r\n\t// \treturn () => {\r\n\t// \t\tNotifications.removeNotificationSubscription(listener.current);\r\n\t// \t\tNotifications.removeNotificationSubscription(responseListener.current);\r\n\t// \t};\r\n\t// }, []);\r\n\r\n\tconst toggleSwitch = () => {\r\n\t\tsetIsEnabled((previousState) => !previousState);\r\n\t// \tif (!isEnabled) {\r\n\t// \t\t// Request permission to display notifications\r\n\t// \t\tNotifications.requestPermissionsAsync().then((statusObj) => {\r\n\t// \t\t\tconsole.log(\"Permission:\", statusObj);\r\n\t// \t\t\tconsole.log(expoPushToken);\r\n\t// \t\t});\r\n\t// \t} else {\r\n\t// \t\t// Revoke permission to display notifications\r\n\t// \t\tNotifications.setNotificationHandler({\r\n\t// \t\t\thandleNotification: async () => ({\r\n\t// \t\t\t\tshouldShowAlert: true,\r\n\t// \t\t\t\tshouldPlaySound: false,\r\n\t// \t\t\t\tshouldSetBadge: false,\r\n\t// \t\t\t}),\r\n\t// \t\t});\r\n\t// \t}\r\n\t};\r\n\r\n// \tconst sendPushTokenToBackend= async(pushToken)=>{\r\n// \t\tconst body = {\r\n// \t\t\tdeviceID:pushToken,\r\n// \t\t\tplatform:Platform.OS\r\n// \t\t}\r\n\r\n//       console.log(pushToken)\r\n// \tconsole.log(body)\r\n\r\n// try{\r\n// const res = await client.post(`/registerDevice`,body\r\n// )\r\n// console.log(res)\r\n// if(res.status === 200){\r\n// \tconsole.log(\"Push token sent:\", res.data.data)\r\n// }\r\n// }catch (e){\r\n// console.log(e)\r\n// }\r\n// \t}\r\n\r\n\r\n\treturn (\r\n\t\t<View style={{ marginLeft: 30, marginRight: 30, top: 40 }}>\r\n\t\t\t<View\r\n\t\t\t\tstyle={{\r\n\t\t\t\t\tflexDirection: \"row\",\r\n\t\t\t\t\tpaddingTop: 20,\r\n\t\t\t\t\tjustifyContent: \"space-between\",\r\n\t\t\t\t}}\r\n\t\t\t>\r\n\t\t\t\t<TouchableOpacity\r\n\t\t\t\t\tactiveOpacity={0.7}\r\n\t\t\t\t\tonPress={() => navigation.goBack()}\r\n\t\t\t\t>\r\n\t\t\t\t\t<Back size={25} style={{}} />\r\n\t\t\t\t</TouchableOpacity>\r\n\t\t\t\t<Text\r\n\t\t\t\t\tstyle={{\r\n\t\t\t\t\t\tfontSize: 24,\r\n\t\t\t\t\t\tfontWeight: \"600\",\r\n\t\t\t\t\t\ttextAlign: \"center\",\r\n\t\t\t\t\t\tcolor: COLORS.black,\r\n\t\t\t\t\t\tmarginRight: width / 6,\r\n\t\t\t\t\t\tpaddingBottom: 20,\r\n\t\t\t\t\t\tfontFamily: \"Poppins3\",\r\n\t\t\t\t\t\t// alignContent:\"y\"\r\n\t\t\t\t\t}}\r\n\t\t\t\t>\r\n\t\t\t\t\tNotifications\r\n\t\t\t\t</Text>\r\n\t\t\t</View>\r\n\t\t\t<Text\r\n\t\t\t\tstyle={{\r\n\t\t\t\t\tfontSize: 17,\r\n\t\t\t\t\tfontWeight: \"600\",\r\n\t\t\t\t\tpaddingBottom: 5,\r\n\t\t\t\t\tcolor: COLORS.black,\r\n\t\t\t\t\tfontFamily: \"Poppins2\",\r\n\t\t\t\t}}\r\n\t\t\t>\r\n\t\t\t\tNotification Settings\r\n\t\t\t</Text>\r\n\t\t\t<Text\r\n\t\t\t\tstyle={{\r\n\t\t\t\t\twidth: 315,\r\n\t\t\t\t\tfontSize: 12,\r\n\t\t\t\t\tpaddingBottom: 5,\r\n\t\t\t\t\tfontWeight: \"300\",\r\n\t\t\t\t\tcolor: COLORS.black,\r\n\t\t\t\t\tfontFamily: \"Poppins\",\r\n\t\t\t\t}}\r\n\t\t\t>\r\n\t\t\t\tWe may still send you important notifications about your account outside\r\n\t\t\t\tof your notification settings\r\n\t\t\t</Text>\r\n\t\t\t<Text\r\n\t\t\t\tstyle={{\r\n\t\t\t\t\tfontSize: 10,\r\n\t\t\t\t\tpaddingBottom: 8,\r\n\t\t\t\t\tcolor: COLORS.black,\r\n\t\t\t\t\tfontWeight: \"500\",\r\n\t\t\t\t\tfontFamily: \"Poppins\",\r\n\t\t\t\t}}\r\n\t\t\t>\r\n\t\t\t\tInteractions\r\n\t\t\t</Text>\r\n\t\t\t<View\r\n\t\t\t\tstyle={{\r\n\t\t\t\t\twidth: width - 60,\r\n\t\t\t\t\theight: 48,\r\n\t\t\t\t\tbackgroundColor: COLORS.white,\r\n\t\t\t\t\tborderRadius: 5,\r\n\t\t\t\t\talignItems: \"center\",\r\n\t\t\t\t\tflexDirection: \"row\",\r\n\t\t\t\t\tjustifyContent: \"space-between\",\r\n\t\t\t\t}}\r\n\t\t\t>\r\n\t\t\t\t<Text\r\n\t\t\t\t\tstyle={{\r\n\t\t\t\t\t\tfontSize: 12,\r\n\t\t\t\t\t\tfontWeight: \"600\",\r\n\t\t\t\t\t\tcolor: COLORS.black,\r\n\t\t\t\t\t\tmarginLeft: 5,\r\n\t\t\t\t\t\tfontFamily: \"Poppins\",\r\n\t\t\t\t\t}}\r\n\t\t\t\t>\r\n\t\t\t\t\tNotifications\r\n\t\t\t\t</Text>\r\n\t\t\t\t<Switch\r\n\t\t\t\t\ttrackColor={{ false: \"#767577\", true: \"#81b0ff\" }}\r\n\t\t\t\t\tthumbColor={isEnabled ? COLORS.primary : \"#f4f3f4\"}\r\n\t\t\t\t\tios_backgroundColor=\"#3e3e3e\"\r\n\t\t\t\t\tonValueChange={toggleSwitch}\r\n\t\t\t\t\tvalue={isEnabled}\r\n\t\t\t\t/>\r\n\t\t\t</View>\r\n\t\t</View>\r\n\t);\r\n};\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n// Notifications.setNotificationHandler({\r\n// \thandleNotification: async () => ({\r\n// \t  shouldShowAlert: true,\r\n// \t  shouldPlaySound: false,\r\n// \t  shouldSetBadge: false,\r\n// \t}),\r\n//   });\r\n  \r\n//   // Can use this function below OR use Expo's Push Notification Tool from: https://expo.dev/notifications\r\n//   async function sendPushNotification(expoPushToken) {\r\n// \tconst message = {\r\n// \t  to: expoPushToken,\r\n// \t  sound: 'default',\r\n// \t  title: 'Original Title',\r\n// \t  body: 'And here is the body!',\r\n// \t  data: { someData: 'goes here' },\r\n// \t};\r\n  \r\n// \tawait fetch('https://exp.host/--/api/v2/push/send', {\r\n// \t  method: 'POST',\r\n// \t  headers: {\r\n// \t\tAccept: 'application/json',\r\n// \t\t'Accept-encoding': 'gzip, deflate',\r\n// \t\t'Content-Type': 'application/json',\r\n// \t  },\r\n// \t  body: JSON.stringify(message),\r\n// \t});\r\n//   }\r\n  \r\n//   async function registerForPushNotificationsAsync() {\r\n// \tlet token;\r\n// \tif (Device.isDevice) {\r\n// \t  const { status: existingStatus } = await Notifications.getPermissionsAsync();\r\n// \t  let finalStatus = existingStatus;\r\n// \t  if (existingStatus !== 'granted') {\r\n// \t\tconst { status } = await Notifications.requestPermissionsAsync();\r\n// \t\tfinalStatus = status;\r\n// \t  }\r\n// \t  if (finalStatus !== 'granted') {\r\n// \t\talert('Failed to get push token for push notification!');\r\n// \t\treturn;\r\n// \t  }\r\n// \t  token = (await Notifications.getExpoPushTokenAsync()).data;\r\n// \t  console.log(token);\r\n// \t} else {\r\n// \t  alert('Must use physical device for Push Notifications');\r\n// \t}\r\n  \r\n// \tif (Platform.OS === 'android') {\r\n// \t  Notifications.setNotificationChannelAsync('default', {\r\n// \t\tname: 'default',\r\n// \t\timportance: Notifications.AndroidImportance.MAX,\r\n// \t\tvibrationPattern: [0, 250, 250, 250],\r\n// \t\tlightColor: '#FF231F7C',\r\n// \t  });\r\n// \t}\r\n  \r\n// \treturn token;\r\n//   }\r\n  \r\n//   export default function Notification (){\r\n// \tconst [expoPushToken, setExpoPushToken] = useState('');\r\n// \tconst [notification, setNotification] = useState(false);\r\n// \tconst notificationListener = useRef();\r\n// \tconst responseListener = useRef();\r\n  \r\n// \tuseEffect(() => {\r\n// \t  registerForPushNotificationsAsync().then(token => setExpoPushToken(token));\r\n  \r\n// \t  notificationListener.current = Notifications.addNotificationReceivedListener(notification => {\r\n// \t\tsetNotification(notification);\r\n// \t  });\r\n  \r\n// \t  responseListener.current = Notifications.addNotificationResponseReceivedListener(response => {\r\n// \t\tconsole.log(response);\r\n// \t  });\r\n  \r\n// \t  return () => {\r\n// \t\tNotifications.removeNotificationSubscription(notificationListener.current);\r\n// \t\tNotifications.removeNotificationSubscription(responseListener.current);\r\n// \t  };\r\n// \t}, []);\r\n  \r\n// \treturn (\r\n// \t  <View style={{ flex: 1, alignItems: 'center', justifyContent: 'space-around' }}>\r\n// \t\t<Text>Your expo push token: {expoPushToken}</Text>\r\n// \t\t<View style={{ alignItems: 'center', justifyContent: 'center' }}>\r\n// \t\t  <Text>Title: {notification && notification.request.content.title} </Text>\r\n// \t\t  <Text>Body: {notification && notification.request.content.body}</Text>\r\n// \t\t  <Text>Data: {notification && JSON.stringify(notification.request.content.data)}</Text>\r\n// \t\t</View>\r\n// \t\t<Button\r\n// \t\t  title=\"Press to Send Notification\"\r\n// \t\t  onPress={async () => {\r\n// \t\t\tawait sendPushNotification(expoPushToken);\r\n// \t\t  }}\r\n// \t\t/>\r\n// \t  </View>\r\n// \t);\r\n//   }\r\n\r\nconst styles = StyleSheet.create({\r\n\tcontainer: {\r\n\t\tflex: 1,\r\n\t\tbackgroundColor: \"#fff\",\r\n\t\talignItems: \"center\",\r\n\t\tjustifyContent: \"center\",\r\n\t},\r\n\tpermission: {\r\n\t\tflexDirection: \"row\",\r\n\t\talignItems: \"center\",\r\n\t\tmarginVertical: 10,\r\n\t},\r\n});\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}