{"ast":null,"code":"import invariant from 'invariant';\nimport { Commands } from \"../View/ViewNativeComponent\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport View from \"react-native-web/dist/exports/View\";\nimport processColor from \"react-native-web/dist/exports/processColor\";\nimport * as React from 'react';\nimport { useMemo } from 'react';\nexport default function useAndroidRippleForView(rippleConfig, viewRef) {\n  var _ref = rippleConfig != null ? rippleConfig : {},\n    color = _ref.color,\n    borderless = _ref.borderless,\n    radius = _ref.radius,\n    foreground = _ref.foreground;\n  return useMemo(function () {\n    if (Platform.OS === 'android' && Platform.Version >= 21 && (color != null || borderless != null || radius != null)) {\n      var processedColor = processColor(color);\n      invariant(processedColor == null || typeof processedColor === 'number', 'Unexpected color given for Ripple color');\n      var nativeRippleValue = {\n        type: 'RippleAndroid',\n        color: processedColor,\n        borderless: borderless === true,\n        rippleRadius: radius\n      };\n      return {\n        viewProps: foreground === true ? {\n          nativeForegroundAndroid: nativeRippleValue\n        } : {\n          nativeBackgroundAndroid: nativeRippleValue\n        },\n        onPressIn: function onPressIn(event) {\n          var view = viewRef.current;\n          if (view != null) {\n            var _event$nativeEvent$lo, _event$nativeEvent$lo2;\n            Commands.hotspotUpdate(view, (_event$nativeEvent$lo = event.nativeEvent.locationX) != null ? _event$nativeEvent$lo : 0, (_event$nativeEvent$lo2 = event.nativeEvent.locationY) != null ? _event$nativeEvent$lo2 : 0);\n            Commands.setPressed(view, true);\n          }\n        },\n        onPressMove: function onPressMove(event) {\n          var view = viewRef.current;\n          if (view != null) {\n            var _event$nativeEvent$lo3, _event$nativeEvent$lo4;\n            Commands.hotspotUpdate(view, (_event$nativeEvent$lo3 = event.nativeEvent.locationX) != null ? _event$nativeEvent$lo3 : 0, (_event$nativeEvent$lo4 = event.nativeEvent.locationY) != null ? _event$nativeEvent$lo4 : 0);\n          }\n        },\n        onPressOut: function onPressOut(event) {\n          var view = viewRef.current;\n          if (view != null) {\n            Commands.setPressed(view, false);\n          }\n        }\n      };\n    }\n    return null;\n  }, [borderless, color, foreground, radius, viewRef]);\n}","map":{"version":3,"names":["invariant","Commands","Platform","View","processColor","React","useMemo","useAndroidRippleForView","rippleConfig","viewRef","_ref","color","borderless","radius","foreground","OS","Version","processedColor","nativeRippleValue","type","rippleRadius","viewProps","nativeForegroundAndroid","nativeBackgroundAndroid","onPressIn","event","view","current","_event$nativeEvent$lo","_event$nativeEvent$lo2","hotspotUpdate","nativeEvent","locationX","locationY","setPressed","onPressMove","_event$nativeEvent$lo3","_event$nativeEvent$lo4","onPressOut"],"sources":["C:/Users/STEPHEN/Desktop/busa_app1-main/node_modules/react-native/Libraries/Components/Pressable/useAndroidRippleForView.js"],"sourcesContent":["/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow strict-local\n * @format\n */\n\nimport invariant from 'invariant';\nimport {Commands} from '../View/ViewNativeComponent';\nimport type {ColorValue} from '../../StyleSheet/StyleSheet';\nimport type {PressEvent} from '../../Types/CoreEventTypes';\nimport {Platform, View, processColor} from 'react-native';\nimport * as React from 'react';\nimport {useMemo} from 'react';\n\ntype NativeBackgroundProp = $ReadOnly<{|\n  type: 'RippleAndroid',\n  color: ?number,\n  borderless: boolean,\n  rippleRadius: ?number,\n|}>;\n\nexport type RippleConfig = {|\n  color?: ColorValue,\n  borderless?: boolean,\n  radius?: number,\n  foreground?: boolean,\n|};\n\n/**\n * Provides the event handlers and props for configuring the ripple effect on\n * supported versions of Android.\n */\nexport default function useAndroidRippleForView(\n  rippleConfig: ?RippleConfig,\n  viewRef: {|current: null | React.ElementRef<typeof View>|},\n): ?$ReadOnly<{|\n  onPressIn: (event: PressEvent) => void,\n  onPressMove: (event: PressEvent) => void,\n  onPressOut: (event: PressEvent) => void,\n  viewProps:\n    | $ReadOnly<{|nativeBackgroundAndroid: NativeBackgroundProp|}>\n    | $ReadOnly<{|nativeForegroundAndroid: NativeBackgroundProp|}>,\n|}> {\n  const {color, borderless, radius, foreground} = rippleConfig ?? {};\n\n  return useMemo(() => {\n    if (\n      Platform.OS === 'android' &&\n      Platform.Version >= 21 &&\n      (color != null || borderless != null || radius != null)\n    ) {\n      const processedColor = processColor(color);\n      invariant(\n        processedColor == null || typeof processedColor === 'number',\n        'Unexpected color given for Ripple color',\n      );\n\n      const nativeRippleValue = {\n        type: 'RippleAndroid',\n        color: processedColor,\n        borderless: borderless === true,\n        rippleRadius: radius,\n      };\n\n      return {\n        viewProps:\n          foreground === true\n            ? {nativeForegroundAndroid: nativeRippleValue}\n            : {nativeBackgroundAndroid: nativeRippleValue},\n        onPressIn(event: PressEvent): void {\n          const view = viewRef.current;\n          if (view != null) {\n            Commands.hotspotUpdate(\n              view,\n              event.nativeEvent.locationX ?? 0,\n              event.nativeEvent.locationY ?? 0,\n            );\n            Commands.setPressed(view, true);\n          }\n        },\n        onPressMove(event: PressEvent): void {\n          const view = viewRef.current;\n          if (view != null) {\n            Commands.hotspotUpdate(\n              view,\n              event.nativeEvent.locationX ?? 0,\n              event.nativeEvent.locationY ?? 0,\n            );\n          }\n        },\n        onPressOut(event: PressEvent): void {\n          const view = viewRef.current;\n          if (view != null) {\n            Commands.setPressed(view, false);\n          }\n        },\n      };\n    }\n    return null;\n  }, [borderless, color, foreground, radius, viewRef]);\n}\n"],"mappings":"AAUA,OAAOA,SAAS,MAAM,WAAW;AACjC,SAAQC,QAAQ;AAAqC,OAAAC,QAAA;AAAA,OAAAC,IAAA;AAAA,OAAAC,YAAA;AAIrD,OAAO,KAAKC,KAAK,MAAM,OAAO;AAC9B,SAAQC,OAAO,QAAO,OAAO;AAoB7B,eAAe,SAASC,uBAAuBA,CAC7CC,YAA2B,EAC3BC,OAA0D,EAQxD;EACF,IAAAC,IAAA,GAAgDF,YAAY,WAAZA,YAAY,GAAI,CAAC,CAAC;IAA3DG,KAAK,GAAAD,IAAA,CAALC,KAAK;IAAEC,UAAU,GAAAF,IAAA,CAAVE,UAAU;IAAEC,MAAM,GAAAH,IAAA,CAANG,MAAM;IAAEC,UAAU,GAAAJ,IAAA,CAAVI,UAAU;EAE5C,OAAOR,OAAO,CAAC,YAAM;IACnB,IACEJ,QAAQ,CAACa,EAAE,KAAK,SAAS,IACzBb,QAAQ,CAACc,OAAO,IAAI,EAAE,KACrBL,KAAK,IAAI,IAAI,IAAIC,UAAU,IAAI,IAAI,IAAIC,MAAM,IAAI,IAAI,CAAC,EACvD;MACA,IAAMI,cAAc,GAAGb,YAAY,CAACO,KAAK,CAAC;MAC1CX,SAAS,CACPiB,cAAc,IAAI,IAAI,IAAI,OAAOA,cAAc,KAAK,QAAQ,EAC5D,yCAAyC,CAC1C;MAED,IAAMC,iBAAiB,GAAG;QACxBC,IAAI,EAAE,eAAe;QACrBR,KAAK,EAAEM,cAAc;QACrBL,UAAU,EAAEA,UAAU,KAAK,IAAI;QAC/BQ,YAAY,EAAEP;MAChB,CAAC;MAED,OAAO;QACLQ,SAAS,EACPP,UAAU,KAAK,IAAI,GACf;UAACQ,uBAAuB,EAAEJ;QAAiB,CAAC,GAC5C;UAACK,uBAAuB,EAAEL;QAAiB,CAAC;QAClDM,SAAS,WAAAA,UAACC,KAAiB,EAAQ;UACjC,IAAMC,IAAI,GAAGjB,OAAO,CAACkB,OAAO;UAC5B,IAAID,IAAI,IAAI,IAAI,EAAE;YAAA,IAAAE,qBAAA,EAAAC,sBAAA;YAChB5B,QAAQ,CAAC6B,aAAa,CACpBJ,IAAI,GAAAE,qBAAA,GACJH,KAAK,CAACM,WAAW,CAACC,SAAS,YAAAJ,qBAAA,GAAI,CAAC,GAAAC,sBAAA,GAChCJ,KAAK,CAACM,WAAW,CAACE,SAAS,YAAAJ,sBAAA,GAAI,CAAC,CACjC;YACD5B,QAAQ,CAACiC,UAAU,CAACR,IAAI,EAAE,IAAI,CAAC;UACjC;QACF,CAAC;QACDS,WAAW,WAAAA,YAACV,KAAiB,EAAQ;UACnC,IAAMC,IAAI,GAAGjB,OAAO,CAACkB,OAAO;UAC5B,IAAID,IAAI,IAAI,IAAI,EAAE;YAAA,IAAAU,sBAAA,EAAAC,sBAAA;YAChBpC,QAAQ,CAAC6B,aAAa,CACpBJ,IAAI,GAAAU,sBAAA,GACJX,KAAK,CAACM,WAAW,CAACC,SAAS,YAAAI,sBAAA,GAAI,CAAC,GAAAC,sBAAA,GAChCZ,KAAK,CAACM,WAAW,CAACE,SAAS,YAAAI,sBAAA,GAAI,CAAC,CACjC;UACH;QACF,CAAC;QACDC,UAAU,WAAAA,WAACb,KAAiB,EAAQ;UAClC,IAAMC,IAAI,GAAGjB,OAAO,CAACkB,OAAO;UAC5B,IAAID,IAAI,IAAI,IAAI,EAAE;YAChBzB,QAAQ,CAACiC,UAAU,CAACR,IAAI,EAAE,KAAK,CAAC;UAClC;QACF;MACF,CAAC;IACH;IACA,OAAO,IAAI;EACb,CAAC,EAAE,CAACd,UAAU,EAAED,KAAK,EAAEG,UAAU,EAAED,MAAM,EAAEJ,OAAO,CAAC,CAAC;AACtD"},"metadata":{},"sourceType":"module"}